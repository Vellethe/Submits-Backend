@page
@model TrainingProject.Pages.MyPage.Result.IndexModel

@{
    // Get X-Axis values from the GetXAxisValues() method
    string[] xValues = @Model.XValues;

    // Get Y-Axis values from an array
    string[] yValues = { "200kg", "180kg", "160kg", "140kg", "120kg", "100kg", "80kg", "60kg", "40kg", "20kg", "0kg" };

    // Get X/Y coordinates
    (double xCoordinate, double yCoordinate)[] coordinates = @Model.Coordinates;

    var roundedCoordinates = new (decimal xCoordinate, decimal yCoordinate)[11];

    double[] weightPerDataPoint = @Model.WeightPerDataPoint;

    (double xCoordinate, double yCoordinate) currentCoordinate = @Model.CurrentCoordinate;

    string dateTimeNow = DateTime.Now.ToString("yyyy-MM-dd");

}

<link rel="stylesheet" href="~/css/site.css">
<link rel="stylesheet" href="~/css/Graph.css">
<link href="https://fonts.googleapis.com/css2?family=Smooch+Sans:wght@900" &display="swap" rel="stylesheet">


@*--------Graph Here-----------*@

<div id="Result">

    <div id="ResultValues">

        <h1>Your estimated progress:</h1>

        <ul class="userInput">

            <li>
                <label for="userWeight">Current weight: </label>
                <p id="userWeight"> @Model.User.CurrentWeight kg</p>
            </li>

            <li>
                <label for="userCurrentBmi">Current BMI: </label>
                <p id="userCurrentBmi"> @Model.BMI.CurrentBMI</p>
            </li>

            <li>
                <label id="goalWeightLabel" for="goalWeight">Goal Weight: </label>
                <p id="goalWeight"> @Model.UserData.TargetWeight kg</p>
            </li>

            <li>
                <label for="userTargetBmi">Target BMI: </label>
                <p id="userTargetBmi"> @Model.BMI.TargetBMI</p>
            </li>

            <li>
                <label for="weightDifference">Weight Difference: </label>
                <p id="weightDifference"> @Model.WeightDifference kg</p>
            </li>

            <li>
                <label id="goalLabel" for="goal">Goal: </label>
                <p id="goal"> @Model.UserData.Goal weight</p>
            </li>

            <li>
                <label for="dailyCalories">Daily Calories:  </label>
                <p id="dailyCalories"> @Model.CalorieCount.FinishedBMR</p>
            </li>

            <li>
                <label for="finishDate">Estimated Completion Date:  </label>
                <p id="finishDate"> @Model.CalorieCount.FinishedDate</p>
            </li>

        </ul>
    </div>

    <div id="Graph">

        <svg version="1.2" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"
             class="graph" aria-labelledby="title" role="img" width="60%" height="60%" viewBox="0 0 1200 700">
            <title id="title">A line chart showing some information</title>

            <g class="grid x-grid" id="xGrid">

                <line x1="100" x2="100" y1="15" y2="600"></line>

            </g>

            <g class="grid y-grid" id="yGrid">

                <line x1="100" x2="1100" y1="450" y2="450"></line>

            </g>

            <g class="grid x-grid" id="xGrid">

                <line x1="1100" x2="1100" y1="15" y2="600"></line>

            </g>

            <g class="labels y-labels">

                @for (int i = 0; i < yValues.Length; i++)
                {
                    <text><text x="55" y="@((i * 500 / (yValues.Length - 1)) + 100)">@yValues[i]</text></text>

                    if (i <= 10)
                    {
                        <g class="grid per y-value"><line x1="100" x2="1100" y1="@((i * 500 / (yValues.Length - 1)) + 100)" y2="@((i * 500 / (yValues.Length - 1)) + 100)"></line></g>
                    }

                    <line x1="102.5" y1="@((i * 500 / (yValues.Length - 1)) + 100)" x2="97.5" y2="@((i * 500 / (yValues.Length - 1)) + 100)" stroke="black" stroke-width="2" />


                }

                <text x="50" y="65" class="label-title">Weight</text>

            </g>

            <g class="labels x-labels">

                @for (int i = 0; i < xValues.Length; i++)
                {
                    <text><text x="@((i * 1000 / (xValues.Length - 1)) + 100)" y="650">@xValues[i]</text></text>                  
                    <line x1="@((i * 1000 / (xValues.Length - 1)) + 100)" y1="597.5" x2="@((i * 1000 / (xValues.Length - 1)) + 100)" y2="602.5" stroke="black" stroke-width="2" />
                }

            </g>


            @for (int v = 0; v < 11; v++)
            {
                roundedCoordinates[v].xCoordinate = @Model.AccountData.ConvertToDecimal(coordinates[v].xCoordinate);
                roundedCoordinates[v].yCoordinate = @Model.AccountData.ConvertToDecimal(coordinates[v].yCoordinate);
            }

            @if (Model.UserData.Goal == "Gain" || Model.UserData.Goal == "Lose")
            {
                <path d="M100,@(roundedCoordinates[0].yCoordinate)


                   C@(roundedCoordinates[1].xCoordinate),@(roundedCoordinates[1].yCoordinate),
                    @(roundedCoordinates[2].xCoordinate),@(roundedCoordinates[2].yCoordinate),
                    @(roundedCoordinates[3].xCoordinate),@(roundedCoordinates[3].yCoordinate)

                    C@(roundedCoordinates[4].xCoordinate),@(roundedCoordinates[4].yCoordinate),
                    @(roundedCoordinates[5].xCoordinate),@(roundedCoordinates[5].yCoordinate),
                    @(roundedCoordinates[6].xCoordinate),@(roundedCoordinates[6].yCoordinate)

                    C@(roundedCoordinates[7].xCoordinate),@(roundedCoordinates[7].yCoordinate),
                    @(roundedCoordinates[8].xCoordinate),@(roundedCoordinates[8].yCoordinate),
                    @(roundedCoordinates[9].xCoordinate),@(roundedCoordinates[9].yCoordinate)

                    C@(roundedCoordinates[9].xCoordinate),@(roundedCoordinates[9].yCoordinate),
                    @(roundedCoordinates[10].xCoordinate),@(roundedCoordinates[10].yCoordinate),
                    @(roundedCoordinates[10].xCoordinate),@(roundedCoordinates[10].yCoordinate)"

                    fill="none" stroke-width="10" stroke="url(&quot;#SvgjsLinearGradient1000&quot;)" 
                    stroke-linecap="round" stroke-dasharray="0 10" stroke-opacity="1">
                </path>

                
            }

            @if (Model.UserData.Goal == "Maintain")
            {
                <path d="M100, @(roundedCoordinates[0].yCoordinate)
                    L@(roundedCoordinates[10].xCoordinate), @(roundedCoordinates[10].yCoordinate)Z"
                    fill="none" stroke-width="10" stroke="url(&quot;#SvgjsLinearGradient1000&quot;)"
                    stroke-linecap="round" stroke-dasharray="0 10" stroke-opacity="1">
                </path>
            }
            

            <defs>
                <linearGradient id="SvgjsLinearGradient1000" gradientTransform="rotate(39, 0.5, 0.5)">
                    <stop stop-color="hsl(20, 100%, 50%)" offset="0"></stop>
                    <stop stop-color="hsl(70, 100%, 30%)" offset="1"></stop>
                </linearGradient>
            </defs>

            <g class="dataPoints" data-setname="Our first data set">
                @for (int i = 0; i < 11; i++)
                {
                    <circle cx="@roundedCoordinates[i].xCoordinate" cy="@roundedCoordinates[i].yCoordinate" data-value="@weightPerDataPoint[i]" r="5"><title>@weightPerDataPoint[i]kg</title></circle>
                }
            </g>

            <g class"currentDataPoint" data-setname="Current Date/Weight">
                <circle cx="@currentCoordinate.xCoordinate" cy="@currentCoordinate.yCoordinate" r="5" fill="#1556cb"><title>Date: @dateTimeNow Weight: @Model.User.CurrentWeight kg</title></circle>
            </g>

        </svg>
    </div>

</div>

